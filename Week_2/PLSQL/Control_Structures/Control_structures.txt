
-- Create Customers table
CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY,
    Name VARCHAR(100),
    DOB DATE,
    Balance DECIMAL(10,2),
    LastModified DATETIME,
    IsVIP CHAR(1)
);

-- Create Accounts table
CREATE TABLE Accounts (
    AccountID INT PRIMARY KEY,
    CustomerID INT,
    AccountType VARCHAR(20),
    Balance DECIMAL(10,2),
    LastModified DATETIME,
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
);

-- Create Transactions table
CREATE TABLE Transactions (
    TransactionID INT PRIMARY KEY,
    AccountID INT,
    TransactionDate DATE,
    Amount DECIMAL(10,2),
    TransactionType VARCHAR(10),
    FOREIGN KEY (AccountID) REFERENCES Accounts(AccountID)
);

-- Create Loans table
CREATE TABLE Loans (
    LoanID INT PRIMARY KEY,
    CustomerID INT,
    LoanAmount DECIMAL(10,2),
    InterestRate DECIMAL(5,2),
    StartDate DATE,
    EndDate DATE,
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
);


INSERT INTO Customers VALUES
(1, 'John Doe', STR_TO_DATE('1963-05-15', '%Y-%m-%d'), 6000.00, NOW(), NULL),
(2, 'Jane Smith', STR_TO_DATE('1990-07-20', '%Y-%m-%d'), 11000.00, NOW(), NULL);

-- Insert data into Accounts
INSERT INTO Accounts VALUES
(1, 1, 'Savings', 6000.00, NOW()),
(2, 2, 'Checking', 11000.00, NOW());

-- Insert data into Transactions
INSERT INTO Transactions VALUES
(1, 1, NOW(), 200.00, 'Deposit'),
(2, 2, NOW(), 300.00, 'Withdrawal');

-- Insert data into Loans
INSERT INTO Loans VALUES
(1, 1, 5000.00, 5.00, NOW(), DATE_ADD(NOW(), INTERVAL 60 MONTH)),
(2, 2, 10000.00, 5.00, NOW(), DATE_ADD(NOW(), INTERVAL 25 DAY));










--Scenario 1 


DELIMITER $$

CREATE PROCEDURE ApplyInterestDiscount()
BEGIN
    DECLARE done INT DEFAULT FALSE;
    DECLARE v_CustomerID INT;
    DECLARE v_DOB DATE;

    DECLARE cur CURSOR FOR SELECT CustomerID, DOB FROM Customers;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

    OPEN cur;

    read_loop: LOOP
        FETCH cur INTO v_CustomerID, v_DOB;
        IF done THEN
            LEAVE read_loop;
        END IF;

        IF TIMESTAMPDIFF(YEAR, v_DOB, CURDATE()) > 60 THEN
            UPDATE Loans
            SET InterestRate = InterestRate * 0.99
            WHERE CustomerID = v_CustomerID;

            SELECT CONCAT('Interest rate discounted for CustomerID: ', v_CustomerID) AS Message;
        END IF;
    END LOOP;

    CLOSE cur;

    SELECT 'üìå Updated Loan Records:' AS Info;
    SELECT * FROM Loans;
END$$

DELIMITER ;





--Scenario 2

DROP PROCEDURE IF EXISTS PromoteToVIP;
DELIMITER $$

CREATE PROCEDURE PromoteToVIP()
BEGIN
    DECLARE done INT DEFAULT FALSE;
    DECLARE v_CustomerID INT;
    DECLARE v_Balance DECIMAL(10,2);

    DECLARE cur CURSOR FOR 
        SELECT CustomerID, Balance FROM Accounts;

    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

    OPEN cur;

    read_loop: LOOP
        FETCH cur INTO v_CustomerID, v_Balance;
        IF done THEN
            LEAVE read_loop;
        END IF;

        IF v_Balance > 10000 THEN
            UPDATE Customers SET IsVIP = 'Y' WHERE CustomerID = v_CustomerID;
            SELECT CONCAT('CustomerID ', v_CustomerID, ' is VIP promoted') AS Message;
        ELSE
            UPDATE Customers SET IsVIP = 'N' WHERE CustomerID = v_CustomerID;
            SELECT CONCAT('CustomerID ', v_CustomerID, ' is not VIP') AS Message;
        END IF;
    END LOOP;

    CLOSE cur;

    -- Show updated customer VIP statuses
    SELECT CustomerID, Name, IsVIP FROM Customers;
END$$

DELIMITER ;




--SCENARIO 3 :


DELIMITER $$

CREATE PROCEDURE SendLoanReminders()
BEGIN
    DECLARE done INT DEFAULT FALSE;
    DECLARE v_CustomerID INT;
    DECLARE v_EndDate DATE;

    DECLARE cur CURSOR FOR
        SELECT CustomerID, EndDate
        FROM Loans
        WHERE EndDate BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 30 DAY);

    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

    OPEN cur;

    read_loop: LOOP
        FETCH cur INTO v_CustomerID, v_EndDate;
        IF done THEN
            LEAVE read_loop;
        END IF;

        SELECT CONCAT('Reminder: Loan due on ', DATE_FORMAT(v_EndDate, '%Y-%m-%d'), ' for CustomerID: ', v_CustomerID) AS Message;
    END LOOP;

    CLOSE cur;

    -- Show all loans due within the next 30 days
    SELECT 'üîç Upcoming Loans (within 30 days)' AS Info;
    SELECT * FROM Loans WHERE EndDate BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 30 DAY);
END$$

DELIMITER ;
